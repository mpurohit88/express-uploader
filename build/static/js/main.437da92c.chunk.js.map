{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_BASE","submitForm","contentType","inputObj","setResponse","a","async","URL","axios","method","data","headers","App","useState","title","setTitle","file","setFile","desc","setDesc","className","type","vaue","onChange","e","target","value","placeholder","name","files","onClick","formData","FormData","append","msg","console","log","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,+JCKrCC,EAAW,iCAEjB,SAAeC,EAAWC,EAAaC,EAAUC,GAAjD,mBAAAC,EAAAC,OAAA,uDACQC,EADR,UACiBP,EADjB,+BAAAK,EAAA,MAG2BG,IAAMD,EAAK,CAChCE,OAAQ,OACRC,KAAMP,EACNQ,QAAS,CACP,eAAgB,uBAPxB,gBAGYD,EAHZ,EAGYA,KAQRN,EAAYM,GAXhB,gDAaIN,EAAY,EAAD,IAbf,wDAwFeQ,MA3Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,KA+Bb,OACE,yBAAKC,UAAU,OACb,2CACA,8BACE,4CAEP,2BAAOC,KAAK,OAAOC,KAAMR,EACdS,SAAU,SAACC,GAAQT,EAASS,EAAEC,OAAOC,QACrCC,YAAY,iCAGhB,sCAEP,2BAAON,KAAK,OAAOO,KAAK,OAAOL,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOI,MAAM,QAGhE,6CAEP,8BAAUH,MAAOR,EAAMK,SAAU,SAACC,GAAD,OAAOL,EAAQK,EAAEC,OAAOC,WAGlD,2BAAOL,KAAK,SAASK,MAAM,iBAAiBI,QA/ClD,WACE,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASnB,GACzBiB,EAASE,OAAO,OAAQjB,GACxBe,EAASE,OAAO,OAAQf,GAExBjB,EAAW,EAAuB8B,GAAU,SAACG,GAAD,OAASC,QAAQC,IAAIF,SA0C7D,2BAAOb,KAAK,SAASK,MAAM,iBAAiBI,QAvClD,0BAAAzB,EAAAC,OAAA,uDACQ+B,EAAW,SAAArB,GAAI,OAAI,IAAIsB,SAAQ,SAACC,EAASC,GAC7C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAc3B,GACrByB,EAAOG,OAAS,kBAAML,EAAQ,CAAE7B,KAAM+B,EAAOI,OAAQjB,KAAMZ,EAAKY,QAChEa,EAAOK,QAAU,SAAAC,GAAK,OAAIP,EAAOO,QALrC,KASWjC,EATX,WAAAT,EAAA,MAUgBgC,EAASrB,IAVzB,wBAWUE,EAGRjB,EAAW,EAdb,CASIa,MATJ,KAUIE,KAVJ,KAWIE,KAXJ,OAcuC,SAACgB,GAAD,OAASC,QAAQC,IAAIF,MAd5D,2CCtCkBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.437da92c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nconst API_BASE = \"http://uploader.saimrc.com/api\"\n\nasync function submitForm(contentType, inputObj, setResponse) {\n  const URL = `${API_BASE}/upload`;\n  try {\n    const { data } = await axios(URL, {\n      method: 'POST',\n      data: inputObj,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    );\n    setResponse(data);\n  } catch (error) {\n    setResponse(error);\n  }\n  // axios({\n  //   url: `${API_BASE}/upload`,\n  //   method: 'POST',\n  //   data: data,\n  //   headers: {\n  //     'Content-Type': contentType\n  //   }\n  // }).then((response) => {\n  //   setResponse(response.data);\n  // }).catch((error) => {\n  //   setResponse(\"error\");\n  // })\n}\n\nfunction App() {\n  const [title, setTitle] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [desc, setDesc] = useState(\"\");\n\n  function uploadWithFormData() {\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"file\", file);\n    formData.append(\"desc\", desc);\n\n    submitForm(\"multipart/form-data\", formData, (msg) => console.log(msg));\n  }\n\n  async function uploadWithJSON() {\n    const toBase64 = file => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve({ data: reader.result, name: file.name });\n      reader.onerror = error => reject(error);\n    });\n\n    const data = {\n      title: title,\n      file: await toBase64(file),\n      desc: desc\n    }\n\n    submitForm(\"application/json\", data, (msg) => console.log(msg));\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Upload Form</h2>\n      <form>\n        <label>\n          File Title\n <input type=\"text\" vaue={title}\n            onChange={(e) => { setTitle(e.target.value) }}\n            placeholder=\"Give a title to your upload\" />\n        </label>\n\n        <label>\n          File\n <input type=\"file\" name=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n        </label>\n\n        <label>\n          Description\n <textarea value={desc} onChange={(e) => setDesc(e.target.value)}></textarea>\n        </label>\n\n        <input type=\"button\" value=\"Upload as Form\" onClick={uploadWithFormData} />\n        <input type=\"button\" value=\"Upload as JSON\" onClick={uploadWithJSON} />\n      </form>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}